{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/demi/Documents/Programs/Web/React/nextjs-react/advanced-nextjs-react/pages/meetups/[meetup-id]/index.js\";\nimport MeetUpDetails from \"../../../components/meetups/MeetUpDetails\";\nimport mongoose from \"mongoose\";\n\nconst Meetups = require(\"../../../models/meetups\");\n\nimport Head from \"next/head\";\n\nconst Details = props => {\n  let content = \"\";\n\n  if (props.available) {\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MeetUpDetails, {\n        image: props.image,\n        title: props.title,\n        address: props.address,\n        description: props.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return content;\n};\n\nexport async function getStaticPaths() {\n  mongoose.connect(\"mongodb+srv://SaiTeja:Ashkechum1224@cluster0.bwyer.mongodb.net/myMeetups?retryWrites=true&w=majority\").then(() => {\n    console.log(\"connected to DB\");\n  }).catch(() => {\n    console.log(\"Failed to connect to DB\");\n  });\n  const meetupIds = await Meetups.find({}, \"_id\");\n  await mongoose.disconnect();\n  return {\n    fallback: true,\n    paths: meetupIds.map(meet => ({\n      params: {\n        \"meetup-id\": meet._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params[\"meetup-id\"];\n  mongoose.connect(\"mongodb+srv://SaiTeja:Ashkechum1224@cluster0.bwyer.mongodb.net/myMeetups?retryWrites=true&w=majority\").then(() => {\n    console.log(\"connected to DB\");\n  }).catch(() => {\n    console.log(\"Failed to connect to DB\");\n  }); //fetch\n\n  const data = await Meetups.findById(meetupId);\n\n  if (data === null) {\n    return {\n      props: {\n        available: false,\n        message: \"Didnt find a match to the requested Meetup\"\n      }\n    };\n  } else {\n    return {\n      props: {\n        available: true,\n        image: data.image,\n        title: data.title,\n        address: data.address,\n        description: data.description\n      }\n    };\n  }\n}\nexport default Details;","map":{"version":3,"sources":["/home/demi/Documents/Programs/Web/React/nextjs-react/advanced-nextjs-react/pages/meetups/[meetup-id]/index.js"],"names":["MeetUpDetails","mongoose","Meetups","require","Head","Details","props","content","available","title","image","address","description","getStaticPaths","connect","then","console","log","catch","meetupIds","find","disconnect","fallback","paths","map","meet","params","_id","toString","getStaticProps","context","meetupId","data","findById","message"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,2CAA1B;AACA,OAAOC,QAAP,MAAqB,UAArB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,yBAAD,CAAvB;;AAEA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAID,KAAK,CAACE,SAAV,EAAqB;AACnBD,IAAAA,OAAO,gBACL;AAAA,8BACE,QAAC,IAAD;AAAA,+BACE;AAAA,oBAAQD,KAAK,CAACG;AAAd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,aAAD;AACE,QAAA,KAAK,EAAEH,KAAK,CAACI,KADf;AAEE,QAAA,KAAK,EAAEJ,KAAK,CAACG,KAFf;AAGE,QAAA,OAAO,EAAEH,KAAK,CAACK,OAHjB;AAIE,QAAA,WAAW,EAAEL,KAAK,CAACM;AAJrB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AAaD;;AACD,SAAOL,OAAP;AACD,CAlBD;;AAoBA,OAAO,eAAeM,cAAf,GAAgC;AACrCZ,EAAAA,QAAQ,CACLa,OADH,CAEI,sGAFJ,EAIGC,IAJH,CAIQ,MAAM;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,GANH,EAOGC,KAPH,CAOS,MAAM;AACXF,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,GATH;AAWA,QAAME,SAAS,GAAG,MAAMjB,OAAO,CAACkB,IAAR,CAAa,EAAb,EAAiB,KAAjB,CAAxB;AAEA,QAAMnB,QAAQ,CAACoB,UAAT,EAAN;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,IADL;AAELC,IAAAA,KAAK,EAAEJ,SAAS,CAACK,GAAV,CAAeC,IAAD,KAAW;AAC9BC,MAAAA,MAAM,EAAE;AAAE,qBAAaD,IAAI,CAACE,GAAL,CAASC,QAAT;AAAf;AADsB,KAAX,CAAd;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,QAAQ,GAAGD,OAAO,CAACJ,MAAR,CAAe,WAAf,CAAjB;AAEAzB,EAAAA,QAAQ,CACLa,OADH,CAEI,sGAFJ,EAIGC,IAJH,CAIQ,MAAM;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,GANH,EAOGC,KAPH,CAOS,MAAM;AACXF,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,GATH,EAH4C,CAc5C;;AACA,QAAMe,IAAI,GAAG,MAAM9B,OAAO,CAAC+B,QAAR,CAAiBF,QAAjB,CAAnB;;AACA,MAAIC,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO;AACL1B,MAAAA,KAAK,EAAE;AACLE,QAAAA,SAAS,EAAE,KADN;AAEL0B,QAAAA,OAAO,EAAE;AAFJ;AADF,KAAP;AAMD,GAPD,MAOO;AACL,WAAO;AACL5B,MAAAA,KAAK,EAAE;AACLE,QAAAA,SAAS,EAAE,IADN;AAELE,QAAAA,KAAK,EAAEsB,IAAI,CAACtB,KAFP;AAGLD,QAAAA,KAAK,EAAEuB,IAAI,CAACvB,KAHP;AAILE,QAAAA,OAAO,EAAEqB,IAAI,CAACrB,OAJT;AAKLC,QAAAA,WAAW,EAAEoB,IAAI,CAACpB;AALb;AADF,KAAP;AASD;AACF;AAED,eAAeP,OAAf","sourcesContent":["import MeetUpDetails from \"../../../components/meetups/MeetUpDetails\";\nimport mongoose from \"mongoose\";\nconst Meetups = require(\"../../../models/meetups\");\n\nimport Head from \"next/head\";\n\nconst Details = (props) => {\n  let content = \"\";\n  if (props.available) {\n    content = (\n      <>\n        <Head>\n          <title>{props.title}</title>\n        </Head>\n        <MeetUpDetails\n          image={props.image}\n          title={props.title}\n          address={props.address}\n          description={props.description}\n        />\n      </>\n    );\n  }\n  return content;\n};\n\nexport async function getStaticPaths() {\n  mongoose\n    .connect(\n      \"mongodb+srv://SaiTeja:Ashkechum1224@cluster0.bwyer.mongodb.net/myMeetups?retryWrites=true&w=majority\"\n    )\n    .then(() => {\n      console.log(\"connected to DB\");\n    })\n    .catch(() => {\n      console.log(\"Failed to connect to DB\");\n    });\n\n  const meetupIds = await Meetups.find({}, \"_id\");\n\n  await mongoose.disconnect();\n\n  return {\n    fallback: true,\n    paths: meetupIds.map((meet) => ({\n      params: { \"meetup-id\": meet._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params[\"meetup-id\"];\n\n  mongoose\n    .connect(\n      \"mongodb+srv://SaiTeja:Ashkechum1224@cluster0.bwyer.mongodb.net/myMeetups?retryWrites=true&w=majority\"\n    )\n    .then(() => {\n      console.log(\"connected to DB\");\n    })\n    .catch(() => {\n      console.log(\"Failed to connect to DB\");\n    });\n\n  //fetch\n  const data = await Meetups.findById(meetupId);\n  if (data === null) {\n    return {\n      props: {\n        available: false,\n        message: \"Didnt find a match to the requested Meetup\",\n      },\n    };\n  } else {\n    return {\n      props: {\n        available: true,\n        image: data.image,\n        title: data.title,\n        address: data.address,\n        description: data.description,\n      },\n    };\n  }\n}\n\nexport default Details;\n"]},"metadata":{},"sourceType":"module"}
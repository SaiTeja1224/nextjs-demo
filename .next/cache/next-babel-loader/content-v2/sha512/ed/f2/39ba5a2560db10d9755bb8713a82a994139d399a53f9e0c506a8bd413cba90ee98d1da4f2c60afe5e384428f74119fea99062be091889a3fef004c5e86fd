{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/demi/Documents/Programs/Web/React/nextjs-react/advanced-nextjs-react/pages/meetups/[meetup-id]/index.js\";\nimport MeetUpDetails from \"../../../components/meetups/MeetUpDetails\";\nimport mongoose from \"mongoose\";\n\nconst Meetups = require(\"../../../models/meetups\");\n\nconst Details = props => {\n  let content = \"\";\n\n  if (props.available) {\n    content = /*#__PURE__*/_jsxDEV(MeetUpDetails, {\n      image: \"https://upload.wikimedia.org/wikipedia/commons/e/e5/Cityoflondontowerbridge.jpg\",\n      title: \"Test 1\",\n      address: \"Wall Street\",\n      description: \"This is a cool chill spot downtown.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  }\n\n  return content;\n};\n\nexport async function getStaticPaths() {\n  return {\n    fallback: true,\n    paths: [{\n      params: {\n        \"meetup-id\": \"m1\"\n      }\n    }, {\n      params: {\n        \"meetup-id\": \"m2\"\n      }\n    }, {\n      params: {\n        \"meetup-id\": \"m3\"\n      }\n    }]\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params[\"meetup-id\"];\n  mongoose.connect(\"mongodb+srv://SaiTeja:Ashkechum1224@cluster0.bwyer.mongodb.net/myMeetups?retryWrites=true&w=majority\").then(() => {\n    console.log(\"connected to DB\");\n  }).catch(() => {\n    console.log(\"Failed to connect to DB\");\n  }); //fetch\n\n  const data = await Meetups.findById(meetupId).exec();\n\n  if (data === null) {\n    return {\n      props: {\n        available: false,\n        message: \"Didnt find a match to the requested Meetup\"\n      }\n    };\n  } else {\n    return {\n      props: {\n        available: true,\n        image: data.image,\n        title: data.title,\n        address: data.address,\n        description: data.description\n      }\n    };\n  }\n}\nexport default Details;","map":{"version":3,"sources":["/home/demi/Documents/Programs/Web/React/nextjs-react/advanced-nextjs-react/pages/meetups/[meetup-id]/index.js"],"names":["MeetUpDetails","mongoose","Meetups","require","Details","props","content","available","getStaticPaths","fallback","paths","params","getStaticProps","context","meetupId","connect","then","console","log","catch","data","findById","exec","message","image","title","address","description"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,2CAA1B;AAEA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,yBAAD,CAAvB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAID,KAAK,CAACE,SAAV,EAAqB;AACnBD,IAAAA,OAAO,gBACL,QAAC,aAAD;AACE,MAAA,KAAK,EACH,iFAFJ;AAIE,MAAA,KAAK,EAAC,QAJR;AAKE,MAAA,OAAO,EAAC,aALV;AAME,MAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AACD,SAAOA,OAAP;AACD,CAfD;;AAiBA,OAAO,eAAeE,cAAf,GAAgC;AACrC,SAAO;AACLC,IAAAA,QAAQ,EAAE,IADL;AAELC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE;AAAE,qBAAa;AAAf;AADV,KADK,EAIL;AACEA,MAAAA,MAAM,EAAE;AAAE,qBAAa;AAAf;AADV,KAJK,EAOL;AACEA,MAAAA,MAAM,EAAE;AAAE,qBAAa;AAAf;AADV,KAPK;AAFF,GAAP;AAcD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,QAAQ,GAAGD,OAAO,CAACF,MAAR,CAAe,WAAf,CAAjB;AAEAV,EAAAA,QAAQ,CACLc,OADH,CAEI,sGAFJ,EAIGC,IAJH,CAIQ,MAAM;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,GANH,EAOGC,KAPH,CAOS,MAAM;AACXF,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,GATH,EAH4C,CAc5C;;AACA,QAAME,IAAI,GAAG,MAAMlB,OAAO,CAACmB,QAAR,CAAiBP,QAAjB,EAA2BQ,IAA3B,EAAnB;;AAEA,MAAIF,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO;AACLf,MAAAA,KAAK,EAAE;AACLE,QAAAA,SAAS,EAAE,KADN;AAELgB,QAAAA,OAAO,EAAE;AAFJ;AADF,KAAP;AAMD,GAPD,MAOO;AACL,WAAO;AACLlB,MAAAA,KAAK,EAAE;AACLE,QAAAA,SAAS,EAAE,IADN;AAELiB,QAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFP;AAGLC,QAAAA,KAAK,EAAEL,IAAI,CAACK,KAHP;AAILC,QAAAA,OAAO,EAAEN,IAAI,CAACM,OAJT;AAKLC,QAAAA,WAAW,EAAEP,IAAI,CAACO;AALb;AADF,KAAP;AASD;AACF;AAED,eAAevB,OAAf","sourcesContent":["import MeetUpDetails from \"../../../components/meetups/MeetUpDetails\";\n\nimport mongoose from \"mongoose\";\n\nconst Meetups = require(\"../../../models/meetups\");\n\nconst Details = (props) => {\n  let content = \"\";\n  if (props.available) {\n    content = (\n      <MeetUpDetails\n        image={\n          \"https://upload.wikimedia.org/wikipedia/commons/e/e5/Cityoflondontowerbridge.jpg\"\n        }\n        title=\"Test 1\"\n        address=\"Wall Street\"\n        description=\"This is a cool chill spot downtown.\"\n      />\n    );\n  }\n  return content;\n};\n\nexport async function getStaticPaths() {\n  return {\n    fallback: true,\n    paths: [\n      {\n        params: { \"meetup-id\": \"m1\" },\n      },\n      {\n        params: { \"meetup-id\": \"m2\" },\n      },\n      {\n        params: { \"meetup-id\": \"m3\" },\n      },\n    ],\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params[\"meetup-id\"];\n\n  mongoose\n    .connect(\n      \"mongodb+srv://SaiTeja:Ashkechum1224@cluster0.bwyer.mongodb.net/myMeetups?retryWrites=true&w=majority\"\n    )\n    .then(() => {\n      console.log(\"connected to DB\");\n    })\n    .catch(() => {\n      console.log(\"Failed to connect to DB\");\n    });\n\n  //fetch\n  const data = await Meetups.findById(meetupId).exec();\n\n  if (data === null) {\n    return {\n      props: {\n        available: false,\n        message: \"Didnt find a match to the requested Meetup\",\n      },\n    };\n  } else {\n    return {\n      props: {\n        available: true,\n        image: data.image,\n        title: data.title,\n        address: data.address,\n        description: data.description,\n      },\n    };\n  }\n}\n\nexport default Details;\n"]},"metadata":{},"sourceType":"module"}